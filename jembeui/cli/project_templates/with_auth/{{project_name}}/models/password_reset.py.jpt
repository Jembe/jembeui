from uuid import uuid4
from datetime import datetime, timedelta
import sqlalchemy as sa
from sqlalchemy.ext.hybrid import hybrid_property
from {{ project_name }}.app import db

__all__ = ("PasswordReset",)


def default_uuid():
    """Generates UNIQUE uuid for password reset"""
    uuid = str(uuid4())
    while db.session.query(PasswordReset).filter(PasswordReset.uuid == uuid).first():
        uuid = str(uuid4())
    return uuid


class PasswordReset(db.Model):  # type:ignore
    """Holds information of request password resets/account recoveries"""

    __tablename__ = "password_reset"

    id = sa.Column(sa.Integer(), primary_key=True)

    uuid = sa.Column(sa.String(150), nullable=False, default=default_uuid)

    user_id = sa.Column(sa.Integer(), sa.ForeignKey("users.id"))
    user = sa.orm.relationship("User")

    created_at = sa.Column(sa.DateTime(), default=datetime.utcnow, nullable=False)

    @hybrid_property
    def is_valid(self):
        """Make password reset valid only for 30 minutes"""
        return self.created_at > datetime.utcnow() - timedelta(minutes=30)
