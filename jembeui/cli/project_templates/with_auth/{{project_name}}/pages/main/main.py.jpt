from typing import TYPE_CHECKING
from flask_login import current_user
from flask import redirect
from jembeui import CPage, Component
from jembe import listener, NotFound
from {{ project_name }}.app import jmb
from .navigation import CNavbarMenu, CSidebarMenu
from .welcome import CWelcome
from .dashboard import CDashboard
from .signup import CSignUp
from .signup_verification import CSignUpVerification
from .logout import CLogout
from .login import CLogin
from .password_reset import CPasswordReset
from .password_reset_confirmation import CPasswordResetConfirmation
from .user_profile import CUserProfile

if TYPE_CHECKING:
    import jembe

__all__ = ("CMainPage",)


@jmb.page(
    "main",
    CPage.Config(
        title="{{ project_name }}",
        components=dict(
            welcome=CWelcome,
            dashboard=CDashboard,
            # navigation
            navbar_menu=CNavbarMenu,
            sidebar_menu=CSidebarMenu,
            # Auth
            signup=CSignUp,
            signup_verification=CSignUpVerification,
            logout=CLogout,
            login=CLogin,
            password_reset=CPasswordReset,
            password_reset_confirmation=CPasswordResetConfirmation,
            user_profile=CUserProfile,
            # error pages
            p404=Component,
            p500=Component,
        ),
        display_without_navbar=(
            "signup",
            "signup_verification",
            "logout",
            "login",
            "password_reset",
            "password_reset_confirmation",
        ),
        display_without_sidebar=(
            "welcome",
            "signup",
            "signup_verification",
            "logout",
            "login",
            "password_reset",
            "password_reset_confirmation",
        ),
    ),
)
class CMainPage(CPage):
    """Main application page

    Primary responsability of Main/Root component is to render page navigation
    and display appropriate subcomonents"""

    MODALS = ()
    SWAPS = (
        "dashboard",
        "welcome",
        # Auth
        "signup",
        "signup_verification",
        "logout",
        "login",
        "password_reset",
        "password_reset_confirmation",
        "user_profile",
        # Error pages
        "p404",
        "p500",
    )

    def init(self):
        """Sets default routing to None on _display event will update it"""
        self.routing = None
        return super().init()

    @listener(event="_display", source=SWAPS)
    def on_display_swap_component(self, event: "jembe.Event"):
        """Remove previous content when swaping conntent"""
        if self.routing is None:
            self.routing = event.source_name

            for name in self.SWAPS:
                if self.routing != name:
                    self.remove_component(name)

    def hydrate(self):
        """Hydrate page before displaying it"""
        if self.routing is None:
            self.display_home_page()

    def display_home_page(self):
        """Defines default page for anonoumoys and authenticated user"""
        if current_user.is_authenticated:
            self.display_component("dashboard")
        else:
            self.display_component("welcome")

    @listener(event=("cancel", "submit"), source=("signup", "signup_verification"))
    def on_signup_submit(self, event: "jembe.Event"):
        """Go to home page when submit signup form"""
        self.display_home_page()

    @listener(
        event="cancel",
        source=(
            "signup",
            "signup_verification",
            "login",
            "password_reset",
            "password_reset_confirmation",
            "logout",
        ),
    )
    def on_signup_cancel(self, event: "jembe.Event"):
        """Go to home page when cancels form"""
        self.display_home_page()

    @listener(event="logout")
    def on_logout(self, event: "jembe.Event"):
        """Go to home page on logout"""
        self.display_home_page()

    @listener(event="login")
    def on_login(self, event: "jembe.Event"):
        """Go to home page on logout"""
        if event.params.get("redirect_to", None) is None:
            self.display_home_page()
        else:
            return redirect(event.params["redirect_to"])

    @listener(event="_exception", source="**")
    def on_exception(self, event: "jembe.Event"):
        """
        Catches NotFound expections generated by children
        component at any level, and displays 404, 403 or 500
        page if exception is not handled by other child component.
        """
        if event.handled is False:
            if isinstance(event.exception, NotFound):
                event.handled = True
                self.display_component("p404")
                self.jui.redisplay("navbar_menu", "sidebar_menu")
                # returns True to redisplay it self other
                return True
