from typing import TYPE_CHECKING, Optional, Union
import wtforms as wtf
from flask_babel import lazy_gettext as _
from flask_login import login_user
from jembe import config
from jembeui import Form, CForm
from {{ project_name }}.models import User, PasswordReset

if TYPE_CHECKING:
    from flask_sqlalchemy import Model

__all__ = ("CPasswordResetConfirmation",)


class PasswordResetConfirmationForm(Form):
    """Password recovery/reset form"""

    __style__ = Form.Style(
        fields=dict(
            password=Form.FieldStyle(is_compact=True),
            confirm_password=Form.FieldStyle(is_compact=True),
        )
    )

    password = wtf.PasswordField(
        _("A few words you'll find easy to remember"),
        validators=[wtf.validators.DataRequired(_("Password is required."))],
    )
    confirm_password = wtf.PasswordField(
        _("Confirm password"),
        # "Potvrdite lozinku",
        validators=[
            wtf.validators.EqualTo("password", message=_("Passwords must match.")),
            wtf.validators.DataRequired(_("Password confirmation is required.")),
        ],
    )

    def submit(self, record: Union["Model", dict]) -> Optional[Union["Model", dict]]:
        """Update user password and deletes password reset request and logins user"""
        password_reset: "PasswordReset" = record  # type:ignore

        # Update password
        user: "User" = password_reset.user
        user.set_password(self.password.data)
        self.cform.session.add(user)

        # Delete password reset
        self.cform.session.query(PasswordReset).filter(
            PasswordReset.user_id == user.id
        ).delete()

        self.cform.session.commit()

        return user


@config(
    CForm.Config(
        title=_("Choose a new password"),
        form=PasswordResetConfirmationForm,
        get_record=lambda c: c.session.query(PasswordReset)
        .filter(PasswordReset.uuid == c.state.uuid, PasswordReset.is_valid)
        .first(),
    )
)
class CPasswordResetConfirmation(CForm):
    """Password Recovery/Resets"""

    def __init__(self, uuid: str, form: Optional[Form] = None):
        """defines uuid and form state params"""
        super().__init__()

    def on_form_submited(self, user: "User") -> Optional[bool]:
        """Login user and emit update_ac and login"""

        login_user(user)

        self.jui.push_page_alert(_("Welcome {}!").format(user.name))
        self.emit("login")
        self.emit("update_ac")

        return False
