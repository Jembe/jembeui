from typing import TYPE_CHECKING, Optional, Union
import wtforms as wtf
import sqlalchemy as sa
from flask_babel import lazy_gettext as _
from flask_login import login_user, current_user
from jembe import config
from jembeui import Form, CForm
from {{ project_name }}.models import User

if TYPE_CHECKING:
    from flask_sqlalchemy import Model

__all__ = ("CLogin",)


class LoginForm(Form):
    """Login form"""

    __style__ = Form.Style(
        fields=dict(
            email=Form.FieldStyle(is_compact=True),
            password=Form.FieldStyle(is_compact=True),
        )
    )

    email = wtf.EmailField(
        _("Enter email"),
        validators=[
            wtf.validators.DataRequired(_("Email is required.")),
            wtf.validators.Email(_("Enter a valid email.")),
        ],
    )

    password = wtf.PasswordField(
        _("Enter password"),
        validators=[wtf.validators.DataRequired(_("Password is required."))],
    )

    def validate_password(self, field):
        """Checks if user and passwords combination is valid"""
        user: Optional["User"] = (
            self.cform.session.query(User)
            .filter(sa.func.lower(User.email) == self.email.data.lower())
            .first()
        )
        if not user or not user.check_password(field.data):
            raise wtf.ValidationError(_("Invalid email and password combination."))

    def submit(self, record: Union["Model", dict]) -> Optional[Union["Model", dict]]:
        """Return user on submit"""
        user: Optional["User"] = (
            self.cform.session.query(User)
            .filter(sa.func.lower(User.email) == self.email.data.lower())
            .first()
        )
        return user


@config(
    CForm.Config(
        title=_("Log in to your account"),
        form=LoginForm,
        get_record=lambda c: {},
    )
)
class CLogin(CForm):
    """Displayes login form"""

    def __init__(self, form: Optional[Form] = None, redirect_to: Optional[str] = None):
        """Defines state params

        State params:
            form (Optional[Form], optional): Login form with values. Defaults to None.
            redirect_to (Optional[str], optional): Where to redirect user after succesfull login. Defaults to None.
        """
        super().__init__()

    def update_ac(self):
        """Only unauthenticated user can login"""
        if current_user.is_authenticated:
            self.ac_deny()
        else:
            self.ac_allow()

    def on_form_submited(self, user: "User") -> Optional[bool]:
        """Login user and emit update_ac and login events"""
        if not login_user(user):
            raise ValueError(_("User is deactivated."))

        self.emit("login", redirect_to=self.state.redirect_to)
        self.emit("update_ac")

        return super().on_form_submited(user)

    def push_page_alert_on_form_submit(self):
        """Say welcome to user"""
        self.jui.push_page_alert(_("Welcome {}!").format(current_user.name))
