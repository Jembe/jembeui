from typing import TYPE_CHECKING, Optional, Union
from urllib.parse import urljoin
from markupsafe import Markup
import sqlalchemy as sa
import wtforms as wtf
from flask_babel import lazy_gettext as _
from flask_login import current_user
from flask import request
from jembe import config
from jembeui import Form, CCreateRecord
from {{ project_name }}.includes.jobs import send_password_recovery_email
from {{ project_name }}.models import User, PasswordReset


if TYPE_CHECKING:
    from flask_sqlalchemy import Model


__all__ = ("CPasswordReset",)


class PasswordResetForm(Form):
    """Form that create PasswordReset request and send recovery email"""

    __style__ = Form.Style(fields=dict(email=Form.FieldStyle(is_compact=True)))

    email = wtf.EmailField(
        _("Enter email, where to send recovery link to"),
        validators=[
            wtf.validators.DataRequired(_("Email is required.")),
            wtf.validators.Email(_("Enter a valid email.")),
        ],
    )

    def submit(self, record: Union["Model", dict]) -> Optional[Union["Model", dict]]:
        """Creates password reset and sends recover email if email exist in users"""
        password_reset: "PasswordReset" = record  # type: ignore

        self.email.data = self.email.data.lower()

        # get user with same email
        user = (
            self.cform.session.query(User)
            .filter(
                sa.func.lower(User.email) == self.email.data, User.is_active == True
            )
            .one_or_none()
        )

        if user:
            # display message
            self.cform.jui.push_page_message(
                _("Can't log in?"),
                Markup(
                    _("We send a recovery link to you at <strong>{}</strong>").format(
                        self.email.data
                    )
                ),
            )

            # delete existing password resets and create new one
            self.cform.session.query(PasswordReset).filter(
                PasswordReset.user_id == user.id
            ).delete()

            password_reset.user_id = user.id
            self.cform.session.add(password_reset)
            self.cform.session.commit()

            # send recovery email
            send_password_recovery_email(
                user,
                urljoin(
                    request.url_root,
                    self.cform.component(
                        "/main/password_reset_confirmation", uuid=password_reset.uuid
                    ).url,
                ),
            )
            return user
        else:
            # display message
            self.cform.jui.push_page_message(
                _("Can't log in?"),
                Markup(
                    _(
                        "User with email <strong>{}</strong> doesn't exist or it is suspended."
                    ).format(self.email.data),
                ),
            )
        return None


@config(
    CCreateRecord.Config(
        title=_("Can't log in?"),
        form=PasswordResetForm,
        get_record=lambda c: PasswordReset(),
        redisplay_on_submit=True,
    )
)
class CPasswordReset(CCreateRecord):
    """Allow user to reset forgoten password"""

    def update_ac(self):
        """Only Anonymous user can request password reset"""
        if current_user.is_authenticated:
            self.ac_deny()
        else:
            self.ac_allow()

    def push_page_alert_on_form_invalid(self):
        """Don't show alert when form is invalid"""

    def push_page_alert_on_form_submit(self):
        """Don't show alert when form is submited"""
