from typing import TYPE_CHECKING
from jembeui import CPage, Component
from jembe import listener, NotFound
from {{ project_name }}.app import jmb
from .navigation import CNavbarMenu, CSidebarMenu
from .about import CAbout
from .dashboard import CDashboard

if TYPE_CHECKING:
    import jembe

__all__ = ("CMainPage",)


@jmb.page(
    "main",
    CPage.Config(
        components=dict(
            dashboard=CDashboard,
            about=CAbout,
            # navigation
            navbar_menu=CNavbarMenu,
            sidebar_menu=CSidebarMenu,
            # error pages
            p404=Component,
            p500=Component,
        )
    ),
)
class CMainPage(CPage):
    MODALS = ()
    SWAPS = ("dashboard", "about", "p404", "p500")

    def init(self):
        self.routing = None
        return super().init()

    @listener(event="_display", source=SWAPS)
    def on_display_swap_component(self, event: "jembe.Event"):
        if self.routing != event.source_name:
            self.routing = event.source_name
            for name in self.SWAPS:
                if self.routing != name:
                    self.remove_component(name)

    def hydrate(self):
        if self.routing is None:
            self.display_component("dashboard")

    @listener(event="_exception", source="**")
    def on_exception(self, event: "jembe.Event"):
        """
        Cathces NotFound expections generated by children
        component at any level, and displays 404, 403 or 500
        page if exception is not handled by other child component.
        """
        if event.handled == False:
            if isinstance(event.exception, NotFound):
                event.handled = True
                self.display_component("p404")
                self.redisplay("navbar_menu", "sidebar_menu")
                # returns True to redisplay it self other
                return True
